def thisBuildScript = project.buildFile


subprojects {
  apply plugin: 'java'
  apply plugin: 'kotlin'

  def XMLs_in = project.file("teamcity")
  def XMLs_out = project.file("generated/teamcity")
  def DSLs = project.file("generated/kotlin")

  def TEST_classes =  project.file('generated/tests')
  def TEST_file =  file("$TEST_classes/test.kt")
  def testPackage = 'org.jonnyzzz.teamcity.dsl.integration_tests'
  def testName = project.name.replaceAll("[^a-zA-Z0-9]+", "_")
  def testName_check = "${testName}_check"
  def testName_dsl = "${testName}_dsl"
  def testName_xml = "${testName}_xml"

  sourceSets {
    generated.kotlin.srcDirs += DSLs
    test.kotlin.srcDirs += TEST_classes
  }

  task generateTestClass {
    inputs.file project.buildFile
    inputs.file rootProject.buildFile
    inputs.file thisBuildScript
    outputs.dir TEST_classes

    doLast {
      delete TEST_file
      TEST_file.parentFile.mkdirs()

      def source = """@file:Suppress("PackageDirectoryMismatch")
    package $testPackage
    ///This is generated file. Do not touch!
    import org.jonnyzzz.teamcity.dsl.util.*

    class $testName_check : IntegrationTestBase()
    class $testName_dsl : GenerateDSLsTestBase()
    class $testName_xml : GenerateXMLsTestBase()

    """

      TEST_file.text = source
    }
  }

  compileTestKotlin.dependsOn generateTestClass

  task cleanGenerated {
    doLast {
      delete XMLs_out
      delete DSLs
    }
  }

  clean.dependsOn cleanGenerated

  dependencies {
    //TODO: fixme. Use modules with fewer dependencies here
    generatedCompile project(':src:model-dsl')

    //include plugins to be available in gradle by default
    project(':src:plugins').subprojects {
      generatedCompile it
    }

    testCompile project(":src:test-integration-helper")
  }

  task test_dsl(type : Test) {
    dependsOn cleanGenerated

    inputs.file thisBuildScript
    inputs.dir XMLs_in
    outputs.dir DSLs

    useJUnit {
      includeCategories "org.jonnyzzz.teamcity.dsl.util.GenerateDSLCategory"
    }
  }

  compileGeneratedKotlin.dependsOn test_dsl

  task test_xml(type : Test) {
    inputs.file thisBuildScript
    dependsOn test_dsl
    dependsOn generatedClasses

    useJUnit {
      includeCategories "org.jonnyzzz.teamcity.dsl.util.GenerateXMLCategory"
    }
  }

  test {
    inputs.file thisBuildScript
    dependsOn test_xml

    useJUnit {
      includeCategories "org.jonnyzzz.teamcity.dsl.util.GenerateCheckCategory"
    }
  }

  [test_dsl, test_xml, test].each {task ->
    task.systemProperty "DATA_XMLS_IN", "$XMLs_in"
    task.systemProperty "DATA_XMLS_OUT", "$XMLs_out"

    task.systemProperty "DATA_DSL_OUT", "$DSLs"
    task.systemProperty "DATA_DSL_CLASSES", project.sourceSets.generated.output.classesDir.path
  }
}
